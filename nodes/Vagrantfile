# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  config.vm.define "vm1" do |vm1|
    vm1.vm.box = "vm1"
    vm1.vm.hostname = 'vm1'
    vm1.vm.box = "ubuntu/trusty64"
    vm1.vm.network "private_network", ip: "192.168.50.11"
  end

  config.vm.define "vm2" do |vm2|
    vm2.vm.box = "vm2"
    vm2.vm.hostname = 'vm2'
    vm2.vm.box = "ubuntu/trusty64"
    vm2.vm.network "private_network", ip: "192.168.50.12"
  end

  config.vm.define "vm3" do |vm3|
    vm3.vm.box = "vm3"
    vm3.vm.hostname = 'vm3'
    vm3.vm.box = "ubuntu/trusty64"
    vm3.vm.network "private_network", ip: "192.168.50.13"
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    apt-get update
    apt-get install -y build-essential nginx-full npm
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuwNiB3SKY2+MlcmIO1xfkdOJuo85AILt7CGmFRfBrB+DEgHtcGpN37G434cFbSesGu/avbsGqDM7mFy5V7vD6zb2cbZVmdzz++++7WYRbPL3LbqpECwhRQcJANVzXuA+iKboMCoc1NlmdwEfsxjrf0mSrPANb3j0DLzUMSVBW3E4NIy7CHChDgpmXWWJqHRJij66Ss/VvXbDyzuWyq+WKIaQWxZEGcOWukOKMR8F5HHhdC8nEJHrME07V+sh2HZ7MAhyRe6G6HfMD8X1ogZK9sGzAM6YM71fjaWk5tfOE0Kuws1Qy6hMQZWrOWr+P2BltggFYcPjZ3cNa76oCYdF3 thiago@tars" >> ~/.ssh/authorized_keys
  SHELL

  config.vm.provision "shell", run: "always", inline: <<-SHELL
    running=$(service nginx status | awk '{print $(NF-1) " " $NF}')
    if [[ $running != "is running" ]]; then
      echo " starting NGinx "
      nginx
      echo "NGinx is up and running..."
    else
      echo "NGinx is already up and running..."
    fi
  SHELL
end
